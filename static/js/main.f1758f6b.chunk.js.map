{"version":3,"sources":["reducers.js","components/CounterButton.js","components/Header.js","components/List.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","components/MainPage.js","actions.js","constants.js","api/api.js","containers/App.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","CounterButton","props","state","count","nextProps","nextState","this","id","style","color","onClick","setState","Component","Header","Fragment","className","Card","React","lazy","List","data","map","item","key","fallback","name","username","email","Search","searchChange","aria-label","type","placeholder","onChange","Scroll","children","overflowY","border","height","ErrorBoundry","hasError","info","console","log","MainPage","filteredRobots","filter","toLowerCase","includes","onRequestRobots","onSearchChange","loadingDOM","contentDOM","setRequestRobots","dispatch","link","fetch","then","response","json","payload","catch","App","connect","searchRobots","requestRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","passive"],"mappings":"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","file":"static/js/main.f1758f6b.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n\n    default:\n      return state;\n  }\n};\n","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <button\n        id='counter'\n        style={{ color: this.props.color || 'none' }}\n        onClick={() => this.setState(state => ({ count: state.count + 1 }))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Suspense } from 'react';\n\nconst Card = React.lazy(() => import('./Card'));\n\nconst List = ({ data }) => {\n  return (\n    <div>\n      {data.map(item => (\n        <Suspense key={item.id} fallback={<div>Loading...</div>}>\n          <Card\n            id={item.id}\n            name={item.name}\n            username={item.username}\n            email={item.email}\n          />\n        </Suspense>\n      ))}\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\nconst Search = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input \n        aria-label='Search Robots'\n        className='pa3 b--blue bg-lightest-blue' \n        type='search' \n        placeholder='search robots...' \n        onChange={searchChange} />\n    </div>\n  )\n}\n\nexport default Search;","import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {children}\n      </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.log('Error', error);\n    console.log('Info', info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError)\n      return (<h1>Oops, something went wrong.</h1>);\n    else return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport List from './List';\nimport Search from './Search';\nimport Scroll from './Scroll';\nimport ErrorBoundry from './ErrorBoundry';\n\nclass MainPage extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  filteredRobots = () => {\n    const { searchField, robots } = this.props;\n\n    return robots.filter(item =>\n      item.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n  };\n\n  render() {\n    const { isPending, onSearchChange } = this.props;\n\n    const loadingDOM = <h1 className='tc'>Loading...</h1>;\n    const contentDOM = (\n      <div className='tc'>\n        <Header />\n        <Search searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <List data={this.filteredRobots()} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n\n    return isPending ? loadingDOM : contentDOM;\n  }\n}\n\nexport default MainPage;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\nimport { apiCall } from './api/api';\n\n// return object\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// return function\nexport const setRequestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  return apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","export const apiCall = link => fetch(link).then(response => response.json());\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\nimport MainPage from '../components/MainPage';\n\nimport { setSearchField, setRequestRobots } from '../actions';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(setRequestRobots())\n});\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />;\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\n      'load',\n      () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n\n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      },\n      { passive: true }\n    );\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from './reducers';\n\nimport 'tachyons';\n\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
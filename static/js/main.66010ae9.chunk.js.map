{"version":3,"sources":["reducers.js","components/Card.js","components/List.js","components/Search.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialState","searchField","Card","id","name","username","email","className","src","alt","List","data","map","item","key","Search","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundry","props","state","hasError","error","info","console","log","this","setState","Component","connect","dispatch","onSearchChange","event","payload","target","value","useState","setData","useEffect","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","loadingDOM","contentDOM","length","Boolean","window","location","hostname","match","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uzBAEA,IAAMA,EAAe,CACnBC,YAAa,I,sBCWAC,G,MAZF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAClC,OACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAG,+BAA0BL,EAA1B,UAAsCM,IAAKJ,IACnD,6BACE,4BAAKD,GACL,2BAAIE,OCUGI,EAfF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,6BACGA,EAAKC,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,CACEC,IAAKD,EAAKV,GACVA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXC,SAAUQ,EAAKR,SACfC,MAAOO,EAAKP,aCEPS,EAZA,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACf,OACE,yBAAKT,UAAU,OACb,2BACEA,UAAU,+BACVU,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCCHI,EARA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,I,wCCkBQK,E,YApBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,QAAQC,IAAI,QAASH,GACrBE,QAAQC,IAAI,OAAQF,GACpBG,KAAKC,SAAS,CAAEN,UAAU,M,+BAI1B,OAAIK,KAAKN,MAAMC,SACL,2DACEK,KAAKP,MAAMN,a,GAjBAe,aC4CZC,eAjCS,SAAAT,GAAK,MAAK,CAChC3B,YAAa2B,EAAM3B,gBAGM,SAAAqC,GAAQ,MAAK,CACtCC,eAAgB,SAACC,GAAD,OAAWF,EChBY,CACvCrB,KCHiC,sBDIjCwB,QDcmDD,EAAME,OAAOC,YA4BnDN,EAzBH,SAAC,GAAqC,IAAnCpC,EAAkC,EAAlCA,YAAasC,EAAqB,EAArBA,eAAqB,EACvBK,mBAAS,IADc,mBACxCjC,EADwC,KAClCkC,EADkC,KAG/CC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAIN,EAAQM,QACxB,IAEH,IAAMC,EAAiBzC,EAAK0C,QAAO,SAAAxC,GAAI,OAAIA,EAAKT,KAAKkD,cAAcC,SAAStD,EAAYqD,kBAElFE,EAAc,wBAAIjD,UAAU,MAAd,cACdkD,EAAc,yBAAKlD,UAAU,MACjC,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAQS,aAAcuB,IACtB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAM5B,KAAMyC,OAKlB,OAAQzC,EAAK+C,OAAsBD,EAAbD,KG/BJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJN,IAAMC,EAAQC,aVRc,WAAwC,IAAvCrC,EAAsC,uDAA9B5B,EAAckE,EAAgB,uDAAP,GAC1D,OAAQA,EAAOjD,MACb,IQR+B,sBRS7B,OAAO,EAAP,GAAYW,EAAZ,CAAmB3B,YAAaiE,EAAOzB,UAEzC,QACE,OAAOb,MUIbuC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEAK,SAASC,eAAe,SD6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.66010ae9.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD } from './constants'\n\nconst initialState = {\n  searchField: ''\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n  \n    default:\n      return state;\n  }\n}","import React from 'react';\n\nconst Card = ({ id, name, username, email }) => {\n  return (\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?50x50`} alt={username} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst List = ({ data }) => {\n  return (\n    <div>\n      {data.map((item) => (\n        <Card \n          key={item.id} \n          id={item.id} \n          name={item.name} \n          username={item.username } \n          email={item.email} />\n      ))}\n    </div>\n  );\n}\n\nexport default List;","import React from 'react';\n\nconst Search = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 b--blue bg-lightest-blue' \n        type='search' \n        placeholder='search robots...' \n        onChange={searchChange} />\n    </div>\n  )\n}\n\nexport default Search;","import React from 'react';\n\nconst Scroll = ({ children }) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {children}\n      </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    console.log('Error', error);\n    console.log('Info', info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError)\n      return (<h1>Oops, something went wrong.</h1>);\n    else return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;","import React, { useState, useEffect } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\nimport List from '../components/List';\nimport Search from '../components/Search';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => ({\n  searchField: state.searchField\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n});\n\nconst App = ({ searchField, onSearchChange }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => setData(users))\n  }, []);\n\n  const filteredRobots = data.filter(item => item.name.toLowerCase().includes(searchField.toLowerCase()));\n\n  const loadingDOM = (<h1 className='tc'>Loading...</h1>);\n  const contentDOM = (<div className='tc'>\n    <h1 className='f1'>RoboFriends</h1>\n    <Search searchChange={onSearchChange} />\n    <Scroll>\n      <ErrorBoundry>\n        <List data={filteredRobots} />\n      </ErrorBoundry>\n    </Scroll>\n  </div>);\n  \n  return !data.length ? loadingDOM : contentDOM;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD } from './constants'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { searchRobots } from './reducers';\n\nimport 'tachyons';\n\nimport './index.css';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}